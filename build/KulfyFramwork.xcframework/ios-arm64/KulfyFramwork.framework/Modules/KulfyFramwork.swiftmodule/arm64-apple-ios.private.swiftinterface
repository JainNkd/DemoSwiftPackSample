// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios15.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name KulfyFramwork
// swift-module-flags-ignorable: -enable-bare-slash-regex
import FleksyAppsCore
import FleksyKeyboardSDK
import Foundation
@_exported import KulfyFramwork
import Reachability
import Swift
import UIKit
import _Concurrency
import _StringProcessing
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class KulfySDKViewController : FleksyKeyboardSDK.FKKeyboardViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) override open func createConfiguration() -> FleksyKeyboardSDK.KeyboardConfiguration
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func dismissKeyboard()
  @_Concurrency.MainActor(unsafe) @objc override open func dismissKeyboardButton()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func eventBus(_ event: Swift.String, payload dictPayload: [Swift.AnyHashable : Any]?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func sessionStarted(_ sessionId: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func sessionEnded(_ sessionId: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func customMagicButton(_ element: Swift.String, forAction action: Swift.Int32)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func onLayoutChanges(_ dictLayout: [Swift.AnyHashable : Any])
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func triggerOpenApp()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func updateKeyboardAppsTextDocumentProxy(_ documentProxy: (any UIKit.UITextDocumentProxy)?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func contextPropertiesChanged(_ properties: FleksyKeyboardSDK.KeyboardProperties)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension KulfyFramwork.KulfySDKViewController : UIKit.UISearchBarDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func searchBarShouldEndEditing(_ searchBar: UIKit.UISearchBar) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func searchBarSearchButtonClicked(_ searchBar: UIKit.UISearchBar)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func searchBarShouldBeginEditing(_ searchBar: UIKit.UISearchBar) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class KulfyDashboardViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension KulfyFramwork.KulfyDashboardViewController : UIKit.UISearchBarDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func searchBarTextDidEndEditing(_ searchBar: UIKit.UISearchBar)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func searchBarShouldBeginEditing(_ searchBar: UIKit.UISearchBar) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func searchBarSearchButtonClicked(_ searchBar: UIKit.UISearchBar)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func searchBarCancelButtonClicked(_ searchBar: UIKit.UISearchBar)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class KulfySDK : KulfyFramwork.KulfySDKAppViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class KulfySDKAppViewController : FleksyKeyboardSDK.FKKeyboardViewController {
  @_Concurrency.MainActor(unsafe) open var apiAccessKey: Swift.String?
  @_Concurrency.MainActor(unsafe) open var keyboardId: Swift.String?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) override open func createConfiguration() -> FleksyKeyboardSDK.KeyboardConfiguration
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func triggerOpenApp()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class KulfyAppView : FleksyAppsCore.KeyboardApp {
  public var initialText: Swift.String?
  final public let appId: Swift.String
  open func dispose()
  @_Concurrency.MainActor public func initialize(listener: any FleksyAppsCore.AppListener, configuration: FleksyAppsCore.AppConfiguration)
  @_Concurrency.MainActor open func close()
  open func onThemeChanged(_ theme: FleksyAppsCore.AppTheme)
  open func appIcon() -> UIKit.UIImage?
  @_Concurrency.MainActor open func open(viewMode: FleksyAppsCore.KeyboardAppViewMode, theme: FleksyAppsCore.AppTheme) -> UIKit.UIView?
  public func onConfigurationChanged(_ configuration: FleksyAppsCore.AppConfiguration)
  @objc deinit
}
extension KulfyFramwork.KulfyAppView : FleksyAppsCore.AppTextFieldDelegate {
  @_Concurrency.MainActor public func onAppIconAction()
  public var placeholder: Swift.String? {
    get
  }
  @_Concurrency.MainActor public func onTextDidChange(_ text: Swift.String?)
  @_Concurrency.MainActor public func onReturnKeyAction(_ text: Swift.String?)
  @_Concurrency.MainActor public func onCloseAction()
}
